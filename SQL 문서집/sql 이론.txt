데이터 베이스

테이블 , 인덱스 , 뷰 , 스토어드 프로시저 , 트리거 , 함수 , 커서 등

인덱스는 데이터를 조회할 때 결과가 나오는 속도를 획기적으로 빠르게 해주고, 뷰는 테이블의 일부를
제한적으로 표현할 때 주로 사용, 스토어드 프로시저는 sql에서 프로그래밍이 가능하도록 해주고,
트리거는 잘못된 데이터가 들어가는 것을 미연에 방지하는 기능


------------------인덱스-------------------
인덱스란 책의 제일 뒤에 수록되는 '찾아보기'와 비슷한 개념

create INDEX idx_member_name ON member(member_name);

on member의 의미는 member 테이블의 member_name열에 인덱스를 지정하라는 의미
(이후 SELECT * FROM member where member_name = '아이유';   로 인덱스검색 성공)

execution plan탭을 보면 non-unique key lookup이라고 뜸
인덱스를 통해 결과를 찾았다는 의미이고 이런 방법을 인덱스 검색이라고 함

인덱스 생성 여부에 따라 결과가 달라지는 것은 아니다.
책의 내용을 찾을 때 찾아보기가 있으면 시간을 단축하는 효과는 있지만, 책의 찾아보기가 없어도
책의 첫 페이지부터 찾아야 하기 때문에 시간이 오래 걸릴 뿐 어차피 동일하게 찾을 수는 있음


------------------뷰-------------------
뷰는 테이블과 상당히 동일한 성격의 데이터베이스 개체
뷰를 활용하면 보안도 강화하고, sql문도 간단하게 사용할 수 있음
뷰를 한마디로 정의하면 '가상의 테이블'이라고 할 수 있다.
일반 사용자는 테이블과 동일하게 뷰를 취급하면 되지만
뷰는 실제 데이터를 가지고 있지 않으며, 진짜 테이블에 링크된 개념이라고 생각하면 됨
뷰는 윈도우즈 운영 체제의 '바로가기 아이콘'과 비슷한 개념

테이블을 사용하지 않고 뷰를 사용하는 이유
ⓐ보안에 도움이 된다.
ⓑ긴 SQL문을 간략하게 만들 수 있다.

------------------스토어드 프로시저-------------------
스토어드 프로시저란 MYSQL에서 제공하는 프로그래밍 기능
여러 개의 SQL문을 하나로 묶어서 편리하게 사용할 수 있다.
SQL을 묶는 개념 외에 C, 자바, 파이썬과 같은 프로그래밍 언어에서 사용되는
연산식, 조건문, 반복문 등을 사용할 수도 있다.

select * from member where member_name = '나훈아';
select * from product where product_name = '삼각김밥';
두 SQL을 입력하고 한꺼번에 실행한다.













